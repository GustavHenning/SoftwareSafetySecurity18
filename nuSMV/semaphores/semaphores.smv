MODULE user(semaphore, active)
VAR
	state : { idle, entering, critical, exiting };
	-- state transitions only fire when active
ASSIGN
	init(state) := idle;
	next(state) := case
		state = idle : { idle, entering };
		state = entering & !semaphore: critical;
		state = critical : { critical, exiting };
		state = exiting  : idle;
		TRUE : state;
	esac;
	next(semaphore) := case
		-- not sure if this should contain running too
		state = entering : TRUE;
		state = exiting : FALSE;
		TRUE : semaphore;
	esac;
	
MODULE main
FAIRNESS running;
VAR
	semaphore : boolean;
	-- doesnt compile? running: 0..1;
	proc1 : process user(semaphore, next(running) = 0);
	proc2 : process user(semaphore, next(running) = 1);
ASSIGN
	init(semaphore) := FALSE;
	next(semaphore) := case
	/-- Dont allow semaphore switches if critical --/
		semaphore = (proc2.state = critical) : FALSE;
		semaphore = (proc1.state = critical) : TRUE;
		TRUE : semaphore;
	esac;
SPEC -- safety
	AG !(proc1.state = critical & proc2.state = critical);
SPEC -- liveness
	AG (proc1.state = entering -> AF proc1.state = critical);