{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Validation, analysis:\
1. A data race occurs when several threads try to access an object and at least of of them try to write something. This can be prevented by adding a shared lock on this particular object, so when a thread wants to access this data, it has to wait for the lock to be available. That\'92s what we did :\
We have added a static lock called dlLock which blocks every possible concurrent access to the variable downloaders.\
The workers are executed thread-safe way since the run function is synchronized.\
The access to the shared output file is safe, since every time the threads want to write in it, the access is protected by the lock. So only one thread at a time can access it. Trying to write in a closed file is handled by a IOException.\
\
2. The resulting system (without errors) is ensured to be without deadlocks, data races or any other defects since JPF is a model checker so it checks every path. But to ensure that the program do what we want it to do, we must add some assertions to check if it is ok or not.\
\
Double clause\
1. In close() just add assert(isClosed == false) before setting isClosed to true.\
2. Couldn\'92t launch it on my computer.}