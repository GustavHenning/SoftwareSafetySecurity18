---------------------------------------------------------------------------
-- AN ELEVATOR CONTROLLER                                                --
---------------------------------------------------------------------------

-- Original example by Alessandra Giordani from the University of Trento.
-- This SMV program describes an elevator system for a 3-floors building.
-- It includes modules both for the physical system (reservation buttons,
-- cabin, door), and for the controller.

---------------------------------------------------------------------------
-- BUTTON                                                                --
---------------------------------------------------------------------------

-- For each floor there is a button to request service, that can be
-- pressed. A pressed button stays pressed unless reset by the
-- controller. A button that is not pressed can become pressed
-- nondeterministically.

MODULE Button(reset, earthquake, state)
  VAR
    pressed : boolean;
  ASSIGN
    init(pressed) := FALSE;
    next(pressed) :=
      case
	earthquake : FALSE;
	state = waiting : FALSE;
        pressed & reset  : FALSE;
        pressed & !reset : TRUE;
        !pressed         : {FALSE,TRUE};
      esac;

  -- REQ: The controller must not reset a button that is not pressed.
	LTLSPEC (reset -> pressed);


---------------------------------------------------------------------------
-- CABIN                                                                 --
---------------------------------------------------------------------------

-- The cabin can be at any floor between 1 and 3. It is equipped with an
-- engine that has a direction of motion, that can be either stopped, up
-- or down.

MODULE Cabin(direction, earthquake, pending)
  DEFINE N:=3;

  VAR
    floor     : 1..N;

  ASSIGN
    next(floor) :=
      case
        next(direction) = stop : floor;
        next(direction) = up   : case
				   floor = 1 & earthquake : 2;
				   floor = 1 : {2, 3};				   
				   floor = 2 : 3;
				   TRUE: floor;
                                 esac;
        next(direction) = down : case
				   !pending : 1;
				   floor = 2 : 1;
				   floor = 3 & earthquake : 2;
				   floor = 3 : {1, 2};
				   TRUE : floor;
                                 esac;
      esac;

  -- REQ: The cabin can move up only if the floor is not N.
	LTLSPEC (next(direction) = up -> floor < N);

  -- REQ: The cabin can move down only if the floor is not 1.
	LTLSPEC (next(direction) = down -> floor > 1);


---------------------------------------------------------------------------
-- DOOR                                                                  --
---------------------------------------------------------------------------

-- The cabin is also equipped with a door, that can be either open
-- or closed. The door can receive either open, close or nop commands
-- from the controller, and it responds opening, closing, or
-- preserving the current state.

MODULE Door(door_cmd)
  VAR
    status : { open, closed };

  ASSIGN
    next(status) :=
      case
        door_cmd = open      : open;
        door_cmd = close     : closed;
        door_cmd = nop       : status;
      esac;

  -- REQ: The controller can issue an open command only if the door is closed.
	LTLSPEC (door_cmd = open -> status = closed);
  -- REQ: The controller can issue a close command only if the door is open.
	LTLSPEC (door_cmd = close -> status = open);


---------------------------------------------------------------------------
-- CONTROLLER                                                            --
---------------------------------------------------------------------------

-- The controller takes in input (as sensory signals) the floor and the
-- direction of motion of the cabin, the status of the door, and the
-- status of the four buttons. It decides the controls to the engine, to
-- the door and to the buttons.

MODULE CTRL(floor, door, pressed_1, pressed_2, pressed_3)
  VAR
    direction : {up, down, stop};
    door_cmd : {open, close, nop};
    reset_1 : boolean;
    reset_2 : boolean;
    reset_3 : boolean;
    sensor : boolean;
    earthquake : boolean;
    repair : boolean;
    state : {ready, waiting};

  -- Button N is reset only if it is pressed, we are at floor N, and
  -- the door is open.
  ASSIGN
    reset_1 := (pressed_1 & floor = 1 & door = open);
    reset_2 := (pressed_2 & floor = 2 & door = open);
    reset_3 := (pressed_3 & floor = 3 & door = open);

  -- Check whether there are pending requests at the current floor,
  -- at a higher floor, and at a lower floor.
  DEFINE
    pending_here := (floor = 1 & pressed_1) | (floor = 2 & pressed_2) |
                    (floor = 3 & pressed_3);

    pending_up   := (floor = 1 & (pressed_2 | pressed_3)) |
                    (floor = 2 & pressed_3);

    pending_down := (floor = 3 & (pressed_1 | pressed_2)) |
                    (floor = 2 & pressed_1) ;

    pending := pending_here | pending_up | pending_down;

  -- * If the cabin is moving, do not send commands to the door.
  -- * If there is a pending request at the current floor and
  --   the door is closed, open it.
  -- * If there are pending requests at different floors and the
  --   door is open, close it.
  -- * Otherwise, do not send commands to the door.
  ASSIGN
    door_cmd :=
      case
	direction = stop & state = waiting & door = open : nop;
	direction = stop & earthquake & door = closed: open;
	direction = up | direction = down : nop;
	direction = stop & pending_here & door = closed: open;
	direction = stop & (pending_up | pending_down) & door = open & !sensor: close;
	direction = stop & !pending & floor != 1 & door = open : close;
	direction = stop & !pending & floor = 1 & door = closed : open;
	TRUE : nop; 
      esac;

  -- Variable "last_dir" records the last movement direction of the cabin.
  VAR
    last_dir : {up,down};
  ASSIGN
    next(last_dir) :=
      case
        direction = stop : last_dir;
        TRUE             : direction;
      esac;

  -- * If the door is open, do not send move commands to the cabin.
  -- * If there is a pending request at the current floor
  --   and the cabin is moving, stop it.
  -- * If there are pending requests both at higher and at lower floors,
  --   keep moving in "last_dir".
  -- * If there are pending requests at higher (lower) floors,
  --   move up (down).
  -- * Otherwise, do not send commands to the cabin.
  ASSIGN
    init(direction) := stop;
    next(direction) :=
      case
	earthquake : stop;
	state = waiting : stop;
	door = open : stop;
	!pending & floor != 1 : down;
	!pending & floor = 1 : stop;
	pending_here & (direction = up | direction = down) : stop;
	pending_down & pending_up : last_dir;
	pending_down & !pending_up : down;
	pending_up & !pending_down :up;
	TRUE: stop; 

      esac;

  ASSIGN
    init(sensor) := 
      case
	door = open : {TRUE, FALSE};
	door = closed : FALSE;
	TRUE : {TRUE, FALSE};
      esac;
    next(sensor) :=
      case
	door = open & door_cmd = close & !sensor : FALSE;
	door = open & door_cmd = nop : {TRUE,FALSE};
	door = closed | next(door) = closed : FALSE;
	TRUE: {TRUE, FALSE};
      esac;

  ASSIGN
    repair :=
      case 
	state = waiting & !earthquake & door = open & direction = stop : TRUE;
	earthquake : FALSE;
	TRUE : FALSE;
      esac;

  ASSIGN
    init(state) := ready;
    next(state) :=
      case
	earthquake : waiting;
	state = waiting & repair : ready;
	TRUE : state;
      esac;	

FAIRNESS sensor = TRUE;
FAIRNESS sensor = FALSE;
FAIRNESS earthquake = FALSE;


  -- The cabin needs to stop before it can change direction.
  SPEC AG(direction = up) -> AX(direction != down)
  SPEC AG(direction = down) -> AX(direction != up)

  LTLSPEC -- The door never closes when the sensor is on
	(sensor -> (door = open U !sensor));

  LTLSPEC -- The sensor is never tripped indefinitely
	(sensor -> F!sensor);

  LTLSPEC -- The elevator remains stopped until repair arrives
	(earthquake -> (direction = stop U repair));

  LTLSPEC -- repair and earthquake canâ€™t occur at the same time
	G!(repair & earthquake);

  LTLSPEC -- If there is an earthquake, repair eventually occurs
	(earthquake -> F repair);
---------------------------------------------------------------------------
-- MAIN                                                                  --
---------------------------------------------------------------------------

-- The main module shows the connection between modules.

MODULE main
  VAR
    cabin : Cabin(ctrl.direction, ctrl.earthquake, ctrl.pending);
    door  : Door(ctrl.door_cmd);
    button_1 : Button(ctrl.reset_1, ctrl.earthquake, ctrl.state);
    button_2 : Button(ctrl.reset_2, ctrl.earthquake, ctrl.state);
    button_3 : Button(ctrl.reset_3, ctrl.earthquake, ctrl.state);
    ctrl : CTRL(cabin.floor, door.status,
                button_1.pressed, button_2.pressed,
                button_3.pressed);



---------------------------------------------------------------------------
-- REQUIREMENTS                                                          --
---------------------------------------------------------------------------

  -- The controller must satisfy the following requirements.

  -- REQ: No button can reach a state where it remains pressed forever.
LTLSPEC
	(button_1.pressed -> F(!button_1.pressed));
LTLSPEC
	(button_2.pressed -> F(!button_2.pressed));
LTLSPEC
	(button_3.pressed -> F(!button_3.pressed));

  -- REQ: No pressed button can be reset until the cabin stops at the
  --      corresponding floor and opens the door.
LTLSPEC
	(button_1.pressed -> (!ctrl.reset_1 U (cabin.floor = 1 & ctrl.direction = stop & door.status = open)));
LTLSPEC
	(button_2.pressed -> (!ctrl.reset_2 U (cabin.floor = 2 & ctrl.direction = stop & door.status = open))); 
LTLSPEC
	(button_3.pressed -> (!ctrl.reset_3 U (cabin.floor = 3 & ctrl.direction = stop & door.status = open))); 


  -- REQ: A button must be reset as soon as the cabin stops at the
  --      corresponding floor with the door open.
LTLSPEC
	(button_1.pressed & cabin.floor = 1 & ctrl.direction = stop & door.status = open -> ctrl.reset_1);
LTLSPEC
	(button_2.pressed & cabin.floor = 2 & ctrl.direction = stop & door.status = open -> ctrl.reset_2);
LTLSPEC
	(button_3.pressed & cabin.floor = 3 & ctrl.direction = stop & door.status = open -> ctrl.reset_3);

  -- REQ: The cabin can move only when the door is closed.
LTLSPEC
	(ctrl.direction = up | ctrl.direction = down -> door.status = closed);


  -- REQ: If no button is pressed, the controller must issue no commands
  --      and the cabin must be stopped.
/-- OLD SPEC BEFORE LOBBY MODE 
LTLSPEC
	(!button_1.pressed & !button_2.pressed & !button_3.pressed & !ctrl.earthquake -> ctrl.direction = stop & ctrl.door_cmd = nop);
--/
LTLSPEC
	(!button_1.pressed & !button_2.pressed & !button_3.pressed & !ctrl.earthquake -> (F(cabin.floor = 1) U (!button_1.pressed & !button_2.pressed & !button_3.pressed)));

LTLSPEC -- If there is an earthquake, the cabin stops and the buttons are ignored until repairs
	(ctrl.earthquake -> next(ctrl.direction) = stop & ((!button_1.pressed & !button_2.pressed & !button_3.pressed) U ctrl.repair));
---------------------------------------------------------------------------------

/-- DOCUMENTATION ERROR TRACE

WRONG MODEL : By setting init(direction) = up, the elevator can be moving even if the door is open.


-- specification ((ctrl.direction = up | ctrl.direction = down) -> door.status = closed)  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample 
Trace Type: Counterexample 
  -> State: 1.1 <-
    cabin.floor = 1
    door.status = open
    button_1.pressed = FALSE
    button_2.pressed = FALSE
    button_3.pressed = FALSE
    ctrl.direction = up
    ctrl.door_cmd = nop
    ctrl.reset_1 = FALSE
    ctrl.reset_2 = FALSE
    ctrl.reset_3 = FALSE
    ctrl.sensor = FALSE
    ctrl.earthquake = FALSE
    ctrl.repair = FALSE
    ctrl.last_dir = up
    cabin.N = 3
    ctrl.pending = FALSE
    ctrl.pending_down = FALSE
    ctrl.pending_up = FALSE
    ctrl.pending_here = FALSE
  -> State: 1.2 <-
    button_1.pressed = TRUE
    ctrl.direction = stop
    ctrl.reset_1 = TRUE
    ctrl.sensor = TRUE
    ctrl.pending = TRUE
    ctrl.pending_here = TRUE
  -> State: 1.3 <-
    button_1.pressed = FALSE
    button_2.pressed = TRUE
    ctrl.door_cmd = close
    ctrl.reset_1 = FALSE
    ctrl.sensor = FALSE
    ctrl.repair = TRUE
    ctrl.pending_up = TRUE
    ctrl.pending_here = FALSE
  -- Loop starts here
  -> State: 1.4 <-
    door.status = closed
    button_1.pressed = TRUE
    ctrl.door_cmd = open
    ctrl.earthquake = TRUE
    ctrl.repair = FALSE
    ctrl.pending_here = TRUE
  -> State: 1.5 <-
    door.status = open
    button_1.pressed = FALSE
    button_2.pressed = FALSE
    ctrl.door_cmd = nop
    ctrl.earthquake = FALSE
    ctrl.pending = FALSE
    ctrl.pending_up = FALSE
    ctrl.pending_here = FALSE
  -> State: 1.6 <-
    button_1.pressed = TRUE
    ctrl.reset_1 = TRUE
    ctrl.sensor = TRUE
    ctrl.repair = TRUE
    ctrl.pending = TRUE
    ctrl.pending_here = TRUE
  -> State: 1.7 <-
    button_1.pressed = FALSE
    button_2.pressed = TRUE
    ctrl.door_cmd = close
    ctrl.reset_1 = FALSE
    ctrl.sensor = FALSE
    ctrl.pending_up = TRUE
    ctrl.pending_here = FALSE
  -> State: 1.8 <-
    door.status = closed
    button_1.pressed = TRUE
    ctrl.door_cmd = open
    ctrl.earthquake = TRUE
    ctrl.repair = FALSE
    ctrl.pending_here = TRUE

--/

