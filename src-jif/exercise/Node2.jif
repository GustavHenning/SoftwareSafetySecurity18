package exercise;

// Implement the Node class of LinkedList
/* 
* 1. Alice, Bob, Chuck wants to keep their data private from each other
* 2. All are allowed the length of the list
* 3. Chuck can know the mean
*/

public class Node2 authority(Alice & Bob) {
	int {Alice->Alice; Bob->Bob; Chuck->Chuck} value;
	Node2 {Alice->Alice,Bob,Chuck; Bob->Alice,Bob,Chuck; Chuck->Alice,Bob,Chuck} next;
	

	public Node2(int {Alice->Alice; Bob->Bob; Chuck->Chuck} value) {
		this.value = value;
		this.next = null;
	}

	public void add {Alice->Alice,Bob,Chuck; Bob->Alice,Bob,Chuck; Chuck->Alice,Bob,Chuck} (int {Alice->Alice; Bob->Bob; Chuck->Chuck} value)  {
		this.next = new Node2(value);
	}

	// Alice, Bob and Chuck are allowed to know how many elements are in the list
	public int {Alice->Alice,Bob,Chuck; Bob->Alice,Bob,Chuck; Chuck->Alice,Bob,Chuck} length {Alice->Alice,Bob,Chuck; Bob->Alice,Bob,Chuck; Chuck->Alice,Bob,Chuck} () {
		Node2 {Alice->Alice,Bob,Chuck; Bob->Alice,Bob,Chuck; Chuck->Alice,Bob,Chuck} n = this.next;
		if(n == null){
			return 0;
		}
		return 1 + n.length();
	}
	/* Alice, Bob and Chuck express concern about the content of the list. 
	(i.e. only someone with the authority of Alice&Bob&Chuck should be allowed to access the content of the list) */
	public int {Alice->Alice&Bob&Chuck; Bob->Alice&Bob&Chuck; Chuck->Alice&Bob&Chuck} get {Alice->Alice&Bob&Chuck; Bob->Alice&Bob&Chuck; Chuck->Alice&Bob&Chuck} (int {Alice->Alice&Bob&Chuck; Bob->Alice&Bob&Chuck; Chuck->Alice&Bob&Chuck} i) : {Alice->Alice&Bob&Chuck; Bob->Alice&Bob&Chuck; Chuck->Alice&Bob&Chuck} throws Exception  {
		Node2 {Alice->Alice&Bob&Chuck; Bob->Alice&Bob&Chuck; Chuck->Alice&Bob&Chuck} n = this.next;
		if(i == 0){
			return this.value;
		}
		return n.get(i-1);
	}

	
	public int {Alice->Alice;Bob->Bob;Chuck->Chuck} mean {Alice->Alice;Bob->Bob;Chuck->Chuck} () {
		Node2 {Alice->Alice,Bob,Chuck; Bob->Alice,Bob,Chuck; Chuck->Alice,Bob,Chuck} node = this;
		int {Alice->Alice,Bob,Chuck; Bob->Alice,Bob,Chuck; Chuck->Alice,Bob,Chuck} count = 0;
		
		int {Alice->Alice;Bob->Bob;Chuck->Chuck} total = 0;
		
		
		while (node != null) {
			count += 1;
			total += node.value;
			node = node.next;
		}
		int mean = 0;
		try {
			mean = total/count;
		} catch (ArithmeticException e) {
		}
		return mean;
	}

	public int {Alice->Chuck;Bob->Chuck; Chuck->Chuck} discloseMeanToChuck {Alice->Alice;Bob->Bob;Chuck->Chuck} () where authority (Alice, Bob) {
		int {Alice->Alice;Bob->Bob;Chuck->Chuck} mean = mean();
		return declassify(mean, {Alice->Alice;Bob->Bob;Chuck->Chuck} to {Alice->Chuck;Bob->Chuck; Chuck->Chuck});
		//return mean;
	}

	public int {Chuck->Chuck} transferMeanToChuck {Alice->Chuck;Bob->Chuck;Chuck->Chuck} () where authority (Alice, Bob) {
		int {Alice->Chuck;Bob->Chuck;Chuck->Chuck} mean = discloseMeanToChuck();
		return declassify(mean, {Alice->Chuck;Bob->Chuck;Chuck->Chuck} to {Chuck->Chuck});
		//return mean;
	}
	

}
