package tinder;


public class DatingApp01 authority (Bob, Chuck, Alice) {
	private double {Alice->Alice} aX;
	private double {Alice->Alice} aY;
	private String {Alice->Alice} aP;
	
	private double {Bob->Bob} bX;
	private double {Bob->Bob} bY;
	private String {Bob->Bob} bP;
	
	private double {Chuck->Chuck} cX;
	private double {Chuck->Chuck} cY;
	private String {Chuck->Chuck} cP;
	
	private NodeAlice {Alice->Alice} aliceLikes = null;
	private NodeBob bobLikes;
	private NodeChuck chuckLikes;
	
	public void updateAlice {Alice->Alice} (double {Alice->Alice} x, double {Alice->Alice} y, String {Alice->Alice} Phone) {
		this.aX = x;
		this.aY = y;
		this.aP = Phone;
	}
	public void updateBob {Bob->Bob} (double {Bob->Bob} x, double {Bob->Bob} y, String {Bob->Bob} Phone) {
		this.bX = x;
		this.bY = y;
		this.bP = Phone;
	} 
	public void updateChuck {Chuck->Chuck} (double {Chuck->Chuck} x, double {Chuck->Chuck} y, String {Chuck->Chuck} Phone) {
		this.cX = x;
		this.cY = y;
		this.cP = Phone;
	}
	
	public NodeAlice {Alice->Alice} findAliceNeighbours {Alice, Bob->Alice; Alice, Chuck->Alice} () where authority (Bob, Chuck) {
	
		double {Bob->Alice} bobX = declassify(bX, {Bob->Bob; Alice, Chuck->Alice} to {Bob->Alice});
		double {Bob->Alice} bobY = declassify(bY, {Bob->Bob; Alice, Chuck->Alice} to {Bob->Alice});
		
		NodeAlice na = null;
		int distanceBob = new Double((aX - bobX)*(aX - bobX) + (aY - bobY)*(aY - bobY)).intValue();
		
		if(distanceBob <= 10*10){
			na = new NodeAlice(Bob, distanceBob);	
		} 
		
		double {Chuck->Alice} chuckX = declassify(cX, {Chuck->Chuck; Alice, Bob->Alice} to {Chuck->Alice});
		double {Chuck->Alice} chuckY = declassify(cY, {Chuck->Chuck; Alice, Bob->Alice} to {Chuck->Alice});
		int {Alice->Alice} distanceChuck = new Double((aX - chuckX)*(aX - chuckX) + (aY - chuckY)*(aY - chuckY)).intValue();
		
		if(distanceChuck <= 10*10){
			NodeAlice {Alice->Alice} toAdd = new NodeAlice(Chuck, distanceChuck);
			na = NodeAlice.append(na, toAdd);			
		}
		
		return na;
		
	}
	
	
	public void addAliceLike {Alice, Bob->Alice; Alice, Chuck->Alice}  (principal {Alice, Bob->Alice; Alice, Chuck->Alice} user) {
		NodeAlice nodes = findAliceNeighbours();
		if(nodes == null){
			return;
		}
		do {
			if(nodes.user == user){
				NodeAlice toAdd = new NodeAlice(nodes.user, nodes.distance);
				aliceLikes = NodeAlice.append(aliceLikes, toAdd);
				return;
			}
			nodes = nodes.next;
			
		} while(nodes != null && nodes.next != null);
	}
	
	private boolean {Alice->Alice} isAliceInBobLikes() : {Alice->Alice}  {
		return true;
	}
	
	public boolean {Alice->Alice} isAliceInChuckLikes() : {Alice->Alice} {
		return true;
	}

	public String{Alice->Alice} discloseNumberToAlice(principal user) {
		return null;
	}
}