package tinder;


public class DatingApp01 authority (Bob, Chuck, Alice) {
	private double {Alice->Alice} aX;
	private double {Alice->Alice} aY;
	private String {Alice->Alice} aP;
	
	private double {Bob->Bob} bX;
	private double {Bob->Bob} bY;
	private String {Bob->Bob} bP;
	
	private double {Chuck->Chuck} cX;
	private double {Chuck->Chuck} cY;
	private String {Chuck->Chuck} cP;
	
	private NodeAlice {Alice->Alice} aliceLikes = null;
	private NodeBob {Bob->Bob} bobLikes = null;
	private NodeChuck {Chuck->Chuck} chuckLikes = null;
	
	public void updateAlice {Alice->Alice} (double {Alice->Alice} x, double {Alice->Alice} y, String {Alice->Alice} Phone) {
		this.aX = x;
		this.aY = y;
		this.aP = Phone;
	}
	public void updateBob {Bob->Bob} (double {Bob->Bob} x, double {Bob->Bob} y, String {Bob->Bob} Phone) {
		this.bX = x;
		this.bY = y;
		this.bP = Phone;
	} 
	public void updateChuck {Chuck->Chuck} (double {Chuck->Chuck} x, double {Chuck->Chuck} y, String {Chuck->Chuck} Phone) {
		this.cX = x;
		this.cY = y;
		this.cP = Phone;
	}
	
	public NodeAlice {Alice->Alice} findAliceNeighbours {Alice, Bob->Alice; Alice, Chuck->Alice} () where authority (Bob, Chuck) {
		NodeAlice na = null;
		int distanceBob = new Double((aX - bX)*(aX - bX) + (aY - bY)*(aY - bY)).intValue();
		
		int {Alice->Alice} publicDistanceBob = declassify(distanceBob, {Bob->Bob; Alice, Chuck->Alice} to {Alice->Alice});
		
		if(distanceBob <= 10*10){
			na = new NodeAlice(Bob, publicDistanceBob);	
		} 
		
		int distanceChuck = new Double((aX - cX)*(aX - cX) + (aY - cY)*(aY - cY)).intValue();
		
		int {Alice->Alice} publicDistanceChuck = declassify(distanceChuck, {Chuck->Chuck; Alice, Bob->Alice} to {Alice->Alice});
		
		if(distanceChuck <= 10*10){
			NodeAlice {Alice->Alice} toAdd = new NodeAlice(Chuck, publicDistanceChuck);
			na = NodeAlice.append(na, toAdd);			
		}
		
		return na;
		
	}
	
	
	public void addAliceLike {Alice, Bob->Alice; Alice, Chuck->Alice}  (principal {Alice, Bob->Alice; Alice, Chuck->Alice} user) {
		NodeAlice nodes = findAliceNeighbours();
		if(nodes == null){
			return;
		}
		do {
			if(nodes.user == user){
				NodeAlice toAdd = new NodeAlice(nodes.user, nodes.distance);
				aliceLikes = NodeAlice.append(aliceLikes, toAdd);
				return;
			}
			nodes = nodes.next;
			
		} while(nodes != null && nodes.next != null);
	}
	
	
	private boolean {Alice->Alice} isAliceInBobLikes {Alice->Alice} () : {Alice->Alice} where authority (Bob, Chuck) {
		
		NodeBob {Alice->Alice} nodes = declassify(bobLikes, {Bob->Bob; Alice->Alice} to {Alice->Alice});
		
		if(nodes == null) {
			return false;
		}
		
		
		while(nodes != null) {
			principal user = declassify(nodes.user, {Alice→Alice; Bob→Bob; Chuck→Bob} to  {Alice->Alice});
			if(user == Alice) {
				return true;
			} else {
				nodes = declassify(nodes.next, {Bob→Bob; Alice→Alice} to {Alice->Alice});
			}
		}
		return false;
	}
	
	public boolean {Alice->Alice} isAliceInChuckLikes {Alice->Alice} () : {Alice->Alice} where authority (Bob, Chuck) {
		
		NodeChuck {Alice->Alice} nodes = declassify(chuckLikes, {Chuck->Chuck; Alice->Alice} to {Alice->Alice});
		
		if(nodes == null) {
			return false;
		}
		
		
		while(nodes != null) {
			principal user = declassify(nodes.user, {Alice→Alice; Chuck→Chuck} to  {Alice->Alice});
			if(user == Alice) {
				return true;
			} else {
				nodes = declassify(nodes.next, {Chuck→Chuck; Alice→Alice} to {Alice->Alice});
			}
		}
		return false;
	}

	public String{Alice->Alice} discloseNumberToAlice {Alice->Alice} (principal {Alice->Alice} user) where authority(Bob, Chuck) {
		NodeAlice nodes = aliceLikes;
		while(nodes != null){
			if(nodes.user == user){
				if(user == Bob) {
					if(isAliceInBobLikes()){
						return declassify(bP, {Alice->Alice;Bob->Bob} to {Alice->Alice});
					}
				} else if (user == Chuck) {
					if(isAliceInChuckLikes()){
						return declassify(cP, {Alice->Alice;Chuck->Chuck} to {Alice->Alice});
					}
				}
			} else {
				nodes = nodes.next;
			}
		}
		return null;
	}
}