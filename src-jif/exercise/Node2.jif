package exercise;

// Implement the Node class of LinkedList
/* 
* 1. Alice, Bob, Chuck wants to keep their data private from each other
* 2. All are allowed the length of the list
* 3. Chuck can know the mean
*/

public class  Node2 {
	private int {Alice->Alice; Bob->Bob; Chuck->Chuck} value;
	private Node2 {Alice->Alice; Bob->Bob; Chuck->Chuck} next;

	public Node2(int {Alice->Alice; Bob->Bob; Chuck->Chuck} value) {
		this.value = value;
		this.next = null;
	}

	public void add {Alice->Alice; Bob->Bob; Chuck->Chuck} (int {Alice->Alice; Bob->Bob; Chuck->Chuck} value)  {
		this.next = new Node2(value);
	}

	// Alice, Bob and Chuck are allowed to know how many elements are in the list
	public int {Alice->Alice; Bob->Bob; Chuck->Chuck} length {Alice->Alice; Bob->Bob; Chuck->Chuck} () {
		Node2 {Alice->Alice; Bob->Bob; Chuck->Chuck} n = this.next;
		if(n == null){
			return 0;
		}
		return 1 + n.length();
	}

	public int get {Alice->Alice; Bob->Bob; Chuck->Chuck} (int {Alice->Alice; Bob->Bob; Chuck->Chuck} i)  {
		Node2 {Alice->Alice; Bob->Bob; Chuck->Chuck} n = this.next;
		if(i == 0) {
			return this.value;
		} else if (n == null) {
			return Integer.MIN_VALUE;		
		}
		return n.get(i-1);
	}

	
	public int {Alice->Chuck; Bob->Chuck; Chuck->Chuck} mean {Alice->Chuck;Bob->Chuck; Chuck->Chuck} ()  {
		Node2 {Alice->Alice; Bob->Bob; Chuck->Chuck} node = this;
		int {Alice->Alice; Bob->Bob; Chuck->Chuck} count = 0;
		
		int {Alice->Alice; Bob->Bob; Chuck->Chuck} total = 0;
		int {Alice->Chuck;Bob->Chuck; Chuck->Chuck} mean = 0;
		
		while (node != null) {
			count += 1;
			total += node.value;
			node = node.next;
		}
		try {
			mean = total/count;
		} catch (ArithmeticException e) {
			mean = 0;
		}
		
		return mean;
	}

	public int {Alice->Chuck;Bob->Chuck; Chuck->Chuck} discloseMeanToChuck {Alice->Chuck;Bob->Chuck; Chuck->Chuck} () {
		return mean();
	}

	public int {Alice->Chuck;Bob->Chuck; Chuck->Chuck} transferMeanToChuck {Alice->Chuck;Bob->Chuck; Chuck->Chuck} ()  {
		return discloseMeanToChuck();
	}
}
